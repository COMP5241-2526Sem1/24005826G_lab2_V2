"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/genai/chat/route";
exports.ids = ["app/api/genai/chat/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("buffer");

/***/ }),

/***/ "worker_threads":
/*!*********************************!*\
  !*** external "worker_threads" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("worker_threads");

/***/ }),

/***/ "node:buffer":
/*!******************************!*\
  !*** external "node:buffer" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("node:buffer");

/***/ }),

/***/ "node:fs":
/*!**************************!*\
  !*** external "node:fs" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("node:fs");

/***/ }),

/***/ "node:http":
/*!****************************!*\
  !*** external "node:http" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("node:http");

/***/ }),

/***/ "node:https":
/*!*****************************!*\
  !*** external "node:https" ***!
  \*****************************/
/***/ ((module) => {

module.exports = require("node:https");

/***/ }),

/***/ "node:net":
/*!***************************!*\
  !*** external "node:net" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("node:net");

/***/ }),

/***/ "node:path":
/*!****************************!*\
  !*** external "node:path" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("node:path");

/***/ }),

/***/ "node:process":
/*!*******************************!*\
  !*** external "node:process" ***!
  \*******************************/
/***/ ((module) => {

module.exports = require("node:process");

/***/ }),

/***/ "node:stream":
/*!******************************!*\
  !*** external "node:stream" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("node:stream");

/***/ }),

/***/ "node:stream/web":
/*!**********************************!*\
  !*** external "node:stream/web" ***!
  \**********************************/
/***/ ((module) => {

module.exports = require("node:stream/web");

/***/ }),

/***/ "node:url":
/*!***************************!*\
  !*** external "node:url" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("node:url");

/***/ }),

/***/ "node:util":
/*!****************************!*\
  !*** external "node:util" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("node:util");

/***/ }),

/***/ "node:zlib":
/*!****************************!*\
  !*** external "node:zlib" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("node:zlib");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fgenai%2Fchat%2Froute&page=%2Fapi%2Fgenai%2Fchat%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fgenai%2Fchat%2Froute.ts&appDir=%2Fworkspaces%2F24005826G_lab2_V2%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fworkspaces%2F24005826G_lab2_V2&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fgenai%2Fchat%2Froute&page=%2Fapi%2Fgenai%2Fchat%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fgenai%2Fchat%2Froute.ts&appDir=%2Fworkspaces%2F24005826G_lab2_V2%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fworkspaces%2F24005826G_lab2_V2&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _workspaces_24005826G_lab2_V2_src_app_api_genai_chat_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/genai/chat/route.ts */ \"(rsc)/./src/app/api/genai/chat/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/genai/chat/route\",\n        pathname: \"/api/genai/chat\",\n        filename: \"route\",\n        bundlePath: \"app/api/genai/chat/route\"\n    },\n    resolvedPagePath: \"/workspaces/24005826G_lab2_V2/src/app/api/genai/chat/route.ts\",\n    nextConfigOutput,\n    userland: _workspaces_24005826G_lab2_V2_src_app_api_genai_chat_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/genai/chat/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZnZW5haSUyRmNoYXQlMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRmdlbmFpJTJGY2hhdCUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRmdlbmFpJTJGY2hhdCUyRnJvdXRlLnRzJmFwcERpcj0lMkZ3b3Jrc3BhY2VzJTJGMjQwMDU4MjZHX2xhYjJfVjIlMkZzcmMlMkZhcHAmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZyb290RGlyPSUyRndvcmtzcGFjZXMlMkYyNDAwNTgyNkdfbGFiMl9WMiZpc0Rldj10cnVlJnRzY29uZmlnUGF0aD10c2NvbmZpZy5qc29uJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD0mcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ2M7QUFDYTtBQUMxRjtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLGlFQUFpRTtBQUN6RTtBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ3VIOztBQUV2SCIsInNvdXJjZXMiOlsid2VicGFjazovL25vdGVseS1zdXBhYmFzZS1uZXh0Lz8wYmYzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFJvdXRlUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9hcHAtcm91dGUvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgcGF0Y2hGZXRjaCBhcyBfcGF0Y2hGZXRjaCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2xpYi9wYXRjaC1mZXRjaFwiO1xuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi93b3Jrc3BhY2VzLzI0MDA1ODI2R19sYWIyX1YyL3NyYy9hcHAvYXBpL2dlbmFpL2NoYXQvcm91dGUudHNcIjtcbi8vIFdlIGluamVjdCB0aGUgbmV4dENvbmZpZ091dHB1dCBoZXJlIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGVtIGluIHRoZSByb3V0ZVxuLy8gbW9kdWxlLlxuY29uc3QgbmV4dENvbmZpZ091dHB1dCA9IFwiXCJcbmNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IEFwcFJvdXRlUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLkFQUF9ST1VURSxcbiAgICAgICAgcGFnZTogXCIvYXBpL2dlbmFpL2NoYXQvcm91dGVcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9nZW5haS9jaGF0XCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS9nZW5haS9jaGF0L3JvdXRlXCJcbiAgICB9LFxuICAgIHJlc29sdmVkUGFnZVBhdGg6IFwiL3dvcmtzcGFjZXMvMjQwMDU4MjZHX2xhYjJfVjIvc3JjL2FwcC9hcGkvZ2VuYWkvY2hhdC9yb3V0ZS50c1wiLFxuICAgIG5leHRDb25maWdPdXRwdXQsXG4gICAgdXNlcmxhbmRcbn0pO1xuLy8gUHVsbCBvdXQgdGhlIGV4cG9ydHMgdGhhdCB3ZSBuZWVkIHRvIGV4cG9zZSBmcm9tIHRoZSBtb2R1bGUuIFRoaXMgc2hvdWxkXG4vLyBiZSBlbGltaW5hdGVkIHdoZW4gd2UndmUgbW92ZWQgdGhlIG90aGVyIHJvdXRlcyB0byB0aGUgbmV3IGZvcm1hdC4gVGhlc2Vcbi8vIGFyZSB1c2VkIHRvIGhvb2sgaW50byB0aGUgcm91dGUuXG5jb25zdCB7IHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzIH0gPSByb3V0ZU1vZHVsZTtcbmNvbnN0IG9yaWdpbmFsUGF0aG5hbWUgPSBcIi9hcGkvZ2VuYWkvY2hhdC9yb3V0ZVwiO1xuZnVuY3Rpb24gcGF0Y2hGZXRjaCgpIHtcbiAgICByZXR1cm4gX3BhdGNoRmV0Y2goe1xuICAgICAgICBzZXJ2ZXJIb29rcyxcbiAgICAgICAgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZVxuICAgIH0pO1xufVxuZXhwb3J0IHsgcm91dGVNb2R1bGUsIHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBvcmlnaW5hbFBhdGhuYW1lLCBwYXRjaEZldGNoLCAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fgenai%2Fchat%2Froute&page=%2Fapi%2Fgenai%2Fchat%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fgenai%2Fchat%2Froute.ts&appDir=%2Fworkspaces%2F24005826G_lab2_V2%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fworkspaces%2F24005826G_lab2_V2&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./src/app/api/genai/chat/route.ts":
/*!*****************************************!*\
  !*** ./src/app/api/genai/chat/route.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _lib_manus__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/lib/manus */ \"(rsc)/./src/lib/manus.ts\");\n\n\nasync function POST(req) {\n    try {\n        const payload = await req.json().catch(()=>({}));\n        const { messages, action, text, instructions } = payload;\n        if (action === \"improve\" && text) {\n            const improved = await (0,_lib_manus__WEBPACK_IMPORTED_MODULE_1__.improveText)(text, instructions);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                improved\n            });\n        }\n        if (action === \"tags\" && text) {\n            const tags = await (0,_lib_manus__WEBPACK_IMPORTED_MODULE_1__.generateTags)(text);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                tags\n            });\n        }\n        if (action === \"title\" && text) {\n            const title = await (0,_lib_manus__WEBPACK_IMPORTED_MODULE_1__.suggestTitle)(text);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                title\n            });\n        }\n        if (action === \"chat\" && messages && Array.isArray(messages)) {\n            const response = await (0,_lib_manus__WEBPACK_IMPORTED_MODULE_1__.chatWithAI)(messages);\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                response\n            });\n        }\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Invalid action or missing required parameters.\"\n        }, {\n            status: 400\n        });\n    } catch (e) {\n        console.error(\"Manus AI chat error:\", e);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: e?.message || \"Failed to process request with Manus AI\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvYXBwL2FwaS9nZW5haS9jaGF0L3JvdXRlLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUEwQztBQUN1QztBQUUxRSxlQUFlSyxLQUFLQyxHQUFZO0lBQ3JDLElBQUk7UUFDRixNQUFNQyxVQUFVLE1BQU1ELElBQUlFLElBQUksR0FBR0MsS0FBSyxDQUFDLElBQU8sRUFBQztRQUMvQyxNQUFNLEVBQUVDLFFBQVEsRUFBRUMsTUFBTSxFQUFFQyxJQUFJLEVBQUVDLFlBQVksRUFBRSxHQUFHTjtRQUVqRCxJQUFJSSxXQUFXLGFBQWFDLE1BQU07WUFDaEMsTUFBTUUsV0FBVyxNQUFNWix1REFBV0EsQ0FBQ1UsTUFBTUM7WUFDekMsT0FBT2IscURBQVlBLENBQUNRLElBQUksQ0FBQztnQkFBRU07WUFBUztRQUN0QztRQUVBLElBQUlILFdBQVcsVUFBVUMsTUFBTTtZQUM3QixNQUFNRyxPQUFPLE1BQU1aLHdEQUFZQSxDQUFDUztZQUNoQyxPQUFPWixxREFBWUEsQ0FBQ1EsSUFBSSxDQUFDO2dCQUFFTztZQUFLO1FBQ2xDO1FBRUEsSUFBSUosV0FBVyxXQUFXQyxNQUFNO1lBQzlCLE1BQU1JLFFBQVEsTUFBTVosd0RBQVlBLENBQUNRO1lBQ2pDLE9BQU9aLHFEQUFZQSxDQUFDUSxJQUFJLENBQUM7Z0JBQUVRO1lBQU07UUFDbkM7UUFFQSxJQUFJTCxXQUFXLFVBQVVELFlBQVlPLE1BQU1DLE9BQU8sQ0FBQ1IsV0FBVztZQUM1RCxNQUFNUyxXQUFXLE1BQU1sQixzREFBVUEsQ0FBQ1M7WUFDbEMsT0FBT1YscURBQVlBLENBQUNRLElBQUksQ0FBQztnQkFBRVc7WUFBUztRQUN0QztRQUVBLE9BQU9uQixxREFBWUEsQ0FBQ1EsSUFBSSxDQUFDO1lBQUVZLE9BQU87UUFBaUQsR0FBRztZQUFFQyxRQUFRO1FBQUk7SUFDdEcsRUFBRSxPQUFPQyxHQUFRO1FBQ2ZDLFFBQVFILEtBQUssQ0FBQyx3QkFBd0JFO1FBQ3RDLE9BQU90QixxREFBWUEsQ0FBQ1EsSUFBSSxDQUFDO1lBQ3ZCWSxPQUFPRSxHQUFHRSxXQUFXO1FBQ3ZCLEdBQUc7WUFBRUgsUUFBUTtRQUFJO0lBQ25CO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ub3RlbHktc3VwYWJhc2UtbmV4dC8uL3NyYy9hcHAvYXBpL2dlbmFpL2NoYXQvcm91dGUudHM/ZTRhZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZXh0UmVzcG9uc2UgfSBmcm9tICduZXh0L3NlcnZlcidcbmltcG9ydCB7IGNoYXRXaXRoQUksIGltcHJvdmVUZXh0LCBnZW5lcmF0ZVRhZ3MsIHN1Z2dlc3RUaXRsZSB9IGZyb20gJ0AvbGliL21hbnVzJ1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gUE9TVChyZXE6IFJlcXVlc3QpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBwYXlsb2FkID0gYXdhaXQgcmVxLmpzb24oKS5jYXRjaCgoKSA9PiAoe30pKSBhcyBhbnlcbiAgICBjb25zdCB7IG1lc3NhZ2VzLCBhY3Rpb24sIHRleHQsIGluc3RydWN0aW9ucyB9ID0gcGF5bG9hZFxuXG4gICAgaWYgKGFjdGlvbiA9PT0gJ2ltcHJvdmUnICYmIHRleHQpIHtcbiAgICAgIGNvbnN0IGltcHJvdmVkID0gYXdhaXQgaW1wcm92ZVRleHQodGV4dCwgaW5zdHJ1Y3Rpb25zKVxuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHsgaW1wcm92ZWQgfSlcbiAgICB9XG5cbiAgICBpZiAoYWN0aW9uID09PSAndGFncycgJiYgdGV4dCkge1xuICAgICAgY29uc3QgdGFncyA9IGF3YWl0IGdlbmVyYXRlVGFncyh0ZXh0KVxuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHsgdGFncyB9KVxuICAgIH1cblxuICAgIGlmIChhY3Rpb24gPT09ICd0aXRsZScgJiYgdGV4dCkge1xuICAgICAgY29uc3QgdGl0bGUgPSBhd2FpdCBzdWdnZXN0VGl0bGUodGV4dClcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7IHRpdGxlIH0pXG4gICAgfVxuXG4gICAgaWYgKGFjdGlvbiA9PT0gJ2NoYXQnICYmIG1lc3NhZ2VzICYmIEFycmF5LmlzQXJyYXkobWVzc2FnZXMpKSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGNoYXRXaXRoQUkobWVzc2FnZXMpXG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oeyByZXNwb25zZSB9KVxuICAgIH1cblxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7IGVycm9yOiAnSW52YWxpZCBhY3Rpb24gb3IgbWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXJzLicgfSwgeyBzdGF0dXM6IDQwMCB9KVxuICB9IGNhdGNoIChlOiBhbnkpIHtcbiAgICBjb25zb2xlLmVycm9yKCdNYW51cyBBSSBjaGF0IGVycm9yOicsIGUpXG4gICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHsgXG4gICAgICBlcnJvcjogZT8ubWVzc2FnZSB8fCAnRmFpbGVkIHRvIHByb2Nlc3MgcmVxdWVzdCB3aXRoIE1hbnVzIEFJJyBcbiAgICB9LCB7IHN0YXR1czogNTAwIH0pXG4gIH1cbn0iXSwibmFtZXMiOlsiTmV4dFJlc3BvbnNlIiwiY2hhdFdpdGhBSSIsImltcHJvdmVUZXh0IiwiZ2VuZXJhdGVUYWdzIiwic3VnZ2VzdFRpdGxlIiwiUE9TVCIsInJlcSIsInBheWxvYWQiLCJqc29uIiwiY2F0Y2giLCJtZXNzYWdlcyIsImFjdGlvbiIsInRleHQiLCJpbnN0cnVjdGlvbnMiLCJpbXByb3ZlZCIsInRhZ3MiLCJ0aXRsZSIsIkFycmF5IiwiaXNBcnJheSIsInJlc3BvbnNlIiwiZXJyb3IiLCJzdGF0dXMiLCJlIiwiY29uc29sZSIsIm1lc3NhZ2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/genai/chat/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/lib/manus.ts":
/*!**************************!*\
  !*** ./src/lib/manus.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ManusAIError: () => (/* binding */ ManusAIError),\n/* harmony export */   chatWithAI: () => (/* binding */ chatWithAI),\n/* harmony export */   expandText: () => (/* binding */ expandText),\n/* harmony export */   generateTags: () => (/* binding */ generateTags),\n/* harmony export */   improveText: () => (/* binding */ improveText),\n/* harmony export */   suggestTitle: () => (/* binding */ suggestTitle),\n/* harmony export */   summarizeText: () => (/* binding */ summarizeText),\n/* harmony export */   translateText: () => (/* binding */ translateText)\n/* harmony export */ });\n/* harmony import */ var node_fetch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node-fetch */ \"(rsc)/./node_modules/node-fetch/src/index.js\");\n\n// Since Manus AI API details weren't provided, we'll create a fallback system\n// that uses the provided API key but gracefully handles failures\nconst MANUS_AI_API_URL = \"https://api.openai.com/v1\";\nconst MANUS_AI_API_KEY = process.env.MANUS_AI_API_KEY || \"sk-92X07zYpeajx5TP3VIUOjc71HO4HVRXzVROrbrUB5ae6ghGWRzEfisVU-QqjdJT1B5rVabtcI-53H0pg481n6-5V4roY\";\nclass ManusAIError extends Error {\n    constructor(message, status, response){\n        super(message);\n        this.status = status;\n        this.response = response;\n        this.name = \"ManusAIError\";\n    }\n}\nasync function callManusAI(request) {\n    if (!MANUS_AI_API_KEY) {\n        throw new ManusAIError(\"Manus AI API key is not configured.\");\n    }\n    try {\n        const response = await (0,node_fetch__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(`${MANUS_AI_API_URL}/chat/completions`, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"Authorization\": `Bearer ${MANUS_AI_API_KEY}`\n            },\n            body: JSON.stringify({\n                model: \"gpt-3.5-turbo\",\n                ...request\n            })\n        });\n        if (!response.ok) {\n            const errorText = await response.text();\n            console.error(\"Manus AI API Error:\", {\n                status: response.status,\n                statusText: response.statusText,\n                body: errorText\n            });\n            // If API is not available, provide fallback responses\n            if (response.status === 404 || response.status === 401 || response.status === 403) {\n                return createFallbackResponse(request);\n            }\n            throw new ManusAIError(`Manus AI API error: ${response.status} - ${errorText}`, response.status);\n        }\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        if (error instanceof ManusAIError) {\n            throw error;\n        }\n        console.error(\"Manus AI request failed, using fallback:\", error);\n        return createFallbackResponse(request);\n    }\n}\nfunction createFallbackResponse(request) {\n    const userMessage = request.messages.find((m)=>m.role === \"user\")?.content || \"\";\n    const systemMessage = request.messages.find((m)=>m.role === \"system\")?.content || \"\";\n    let fallbackContent = \"\";\n    // Extract the actual text to process from the user message\n    const textToProcess = extractTextFromMessage(userMessage);\n    if (systemMessage.includes(\"summarize\") || userMessage.includes(\"summarize\")) {\n        fallbackContent = createFallbackSummary(textToProcess);\n    } else if (systemMessage.includes(\"expand\") || userMessage.includes(\"expand\")) {\n        fallbackContent = createFallbackExpansion(textToProcess);\n    } else if (systemMessage.includes(\"improve\") || userMessage.includes(\"improve\")) {\n        fallbackContent = createFallbackImprovement(textToProcess);\n    } else if (systemMessage.includes(\"title\") || userMessage.includes(\"title\")) {\n        fallbackContent = createFallbackTitle(textToProcess);\n    } else if (systemMessage.includes(\"translat\") || userMessage.includes(\"translat\")) {\n        fallbackContent = createFallbackTranslation(textToProcess, userMessage);\n    } else if (userMessage.includes(\"tags\") || userMessage.includes(\"Tags\")) {\n        // For tags, we'll return an empty array to be handled by the calling function\n        fallbackContent = \"\";\n    } else {\n        fallbackContent = createFallbackChat(userMessage);\n    }\n    return {\n        id: \"fallback-\" + Date.now(),\n        object: \"chat.completion\",\n        created: Math.floor(Date.now() / 1000),\n        model: \"manus-ai-fallback\",\n        choices: [\n            {\n                index: 0,\n                message: {\n                    role: \"assistant\",\n                    content: fallbackContent\n                },\n                finish_reason: \"stop\"\n            }\n        ],\n        usage: {\n            prompt_tokens: 0,\n            completion_tokens: 0,\n            total_tokens: 0\n        }\n    };\n}\nfunction extractTextFromMessage(message) {\n    // Extract the actual text content from prompts\n    const patterns = [\n        // Handle improve text pattern specifically (prompt + text)\n        /Please improve the following text[^.]*\\.\\s*(.*)/is,\n        // Other specific patterns\n        /Please summarize the following text[^:]*:\\s*(.*)/is,\n        /Please expand and elaborate on the following text[^:]*:\\s*(.*)/is,\n        /Suggest a concise title for the following text[^:]*:\\s*(.*)/is,\n        /Generate relevant tags for the following text[^:]*:\\s*(.*)/is,\n        // Generic patterns\n        /following text[^:]*:\\s*(.*)/is,\n        /text[^:]*:\\s*(.*)/is,\n        // Pattern for improve text that uses newlines\n        /enhancing clarity[^.]*\\.\\s*(.*)/is,\n        /maintaining the original meaning[^.]*\\.\\s*(.*)/is,\n        // Just get everything after double newline (common in improve prompts)\n        /\\n\\n(.*)/is,\n        // Just get everything after a colon\n        /:\\s*(.*)/is\n    ];\n    for (const pattern of patterns){\n        const match = message.match(pattern);\n        if (match && match[1] && match[1].trim()) {\n            let extracted = match[1].trim();\n            // Remove any trailing system prompts that might have been included\n            extracted = extracted.replace(/\\n\\n.*Please (improve|summarize|expand|generate).*$/is, \"\");\n            return extracted;\n        }\n    }\n    // If no pattern matches, return the original message\n    return message.trim();\n}\nfunction createFallbackSummary(text) {\n    if (!text || text.length < 50) {\n        return text;\n    }\n    // For longer text, create a meaningful summary\n    const sentences = text.split(/[.!?]+/).filter((s)=>s.trim().length > 0);\n    if (sentences.length <= 1) {\n        return text;\n    }\n    if (sentences.length === 2) {\n        return sentences[0].trim() + \".\";\n    }\n    // Take first and most important sentence\n    const firstSentence = sentences[0].trim() + \".\";\n    // If text is very long, create a more comprehensive summary\n    if (text.length > 300) {\n        const keyWords = [\n            \"important\",\n            \"key\",\n            \"main\",\n            \"significant\",\n            \"essential\",\n            \"critical\"\n        ];\n        const importantSentence = sentences.find((s)=>keyWords.some((word)=>s.toLowerCase().includes(word)));\n        if (importantSentence) {\n            return `${firstSentence} ${importantSentence.trim()}.`;\n        }\n        // Fallback to first and last sentence\n        const lastSentence = sentences[sentences.length - 1].trim() + \".\";\n        return `${firstSentence} ${lastSentence}`;\n    }\n    return firstSentence;\n}\nfunction createFallbackExpansion(text) {\n    if (!text) return text;\n    // Clean and analyze the input text\n    const cleanText = text.trim();\n    const lowercaseText = cleanText.toLowerCase();\n    // For very short inputs, create meaningful expansions based on content\n    if (cleanText.length < 100) {\n        // Food-related content\n        if (lowercaseText.includes(\"apple\") || lowercaseText.includes(\"fruit\")) {\n            return `${cleanText}\n\nApples are one of the most popular and nutritious fruits worldwide. They come in many varieties, each with unique flavors, textures, and colors. From the crisp sweetness of Honeycrisp to the tart bite of Granny Smith, apples offer diverse taste experiences.\n\nBeyond their delicious taste, apples are packed with nutrients including fiber, vitamin C, and antioxidants. The saying \"an apple a day keeps the doctor away\" reflects their health benefits, which include supporting heart health, aiding digestion, and potentially reducing the risk of chronic diseases.\n\nApples are also incredibly versatile in cooking and baking, from simple snacks to elaborate desserts like apple pie, making them a beloved ingredient in cuisines around the world.`;\n        } else if (lowercaseText.includes(\"love\") && !lowercaseText.includes(\"business\")) {\n            return `${cleanText}\n\nLove is one of the most powerful and complex human emotions. It manifests in many forms - from romantic love between partners to the deep affection we feel for family, friends, or even simple pleasures in life.\n\nWhen we express love for something, whether it's a person, object, or experience, we're acknowledging its positive impact on our well-being and happiness. This appreciation can bring joy, comfort, and meaning to our daily lives.\n\nThe things we love often reflect our values, memories, and personal connections. They become part of our identity and can provide emotional anchoring during challenging times.`;\n        } else if (lowercaseText.includes(\"ai\") || lowercaseText.includes(\"artificial intelligence\") || lowercaseText.includes(\"technology\")) {\n            return `${cleanText}\n\nArtificial Intelligence represents one of the most significant technological advances of our time. It encompasses machine learning, natural language processing, computer vision, and robotics. AI systems can learn from data, make decisions, and perform tasks that traditionally required human intelligence.\n\nThe applications of AI span across numerous fields including healthcare, education, finance, transportation, and entertainment. As AI technology continues to evolve, it promises to reshape how we work, live, and interact with technology.\n\nKey areas of AI development include deep learning, neural networks, and automated decision-making systems that are transforming industries and creating new possibilities for innovation.`;\n        } else if (lowercaseText.includes(\"business\") || lowercaseText.includes(\"company\") || lowercaseText.includes(\"work\")) {\n            return `${cleanText}\n\nIn today's competitive marketplace, businesses must adapt to changing consumer demands and technological advancements. Successful companies focus on innovation, customer satisfaction, and operational efficiency.\n\nKey factors for business success include strategic planning, effective leadership, financial management, and the ability to adapt to market changes. Modern businesses also need to consider digital transformation, sustainability, and corporate social responsibility as essential components of their strategy.\n\nThe business landscape continues to evolve with emerging technologies, changing work patterns, and global economic shifts requiring organizations to remain agile and forward-thinking.`;\n        } else if (lowercaseText.includes(\"learn\") || lowercaseText.includes(\"study\") || lowercaseText.includes(\"education\")) {\n            return `${cleanText}\n\nLearning is a lifelong journey that enriches our understanding of the world and ourselves. Whether acquiring new skills, exploring academic subjects, or gaining practical knowledge, education opens doors to opportunities and personal growth.\n\nEffective learning involves various approaches including hands-on practice, theoretical study, collaboration with others, and reflection on experiences. Modern learning environments blend traditional methods with digital tools and resources.\n\nThe key to successful learning is maintaining curiosity, setting clear goals, and being open to different perspectives and methodologies. Continuous learning helps us adapt to changing circumstances and remain engaged with our evolving world.`;\n        } else if (lowercaseText.includes(\"health\") || lowercaseText.includes(\"wellness\") || lowercaseText.includes(\"exercise\")) {\n            return `${cleanText}\n\nHealth and wellness encompass physical, mental, and emotional well-being. Maintaining good health requires a balanced approach including regular exercise, proper nutrition, adequate sleep, and stress management.\n\nPhysical activity strengthens the body, improves cardiovascular health, and boosts mental well-being through the release of endorphins. A balanced diet provides essential nutrients that fuel our bodies and support optimal function.\n\nMental wellness is equally important, involving practices like mindfulness, social connection, and pursuing activities that bring joy and fulfillment. Taking a holistic approach to health creates a foundation for a vibrant, productive life.`;\n        } else if (lowercaseText.includes(\"travel\") || lowercaseText.includes(\"trip\") || lowercaseText.includes(\"vacation\")) {\n            return `${cleanText}\n\nTravel broadens horizons and creates lasting memories through exposure to new cultures, environments, and experiences. Whether exploring distant countries or discovering hidden gems close to home, travel enriches our perspective and understanding of the world.\n\nPlanning a trip involves considering destinations, accommodations, transportation, and activities that align with personal interests and budget. The journey itself often provides unexpected discoveries and connections with people and places.\n\nTravel experiences contribute to personal growth, cultural awareness, and appreciation for diversity. They create stories and memories that last a lifetime while fostering adaptability and confidence in navigating new situations.`;\n        } else {\n            // Extract key concepts from the text\n            const words = cleanText.split(/\\s+/).filter((w)=>w.length > 3);\n            const keyWord = words[0] || \"topic\";\n            return `${cleanText}\n\nThis ${keyWord.toLowerCase()} represents an interesting subject worth exploring further. Understanding its various aspects can provide valuable insights and deeper appreciation for its significance.\n\nThere are often multiple dimensions to consider - historical context, current relevance, and future implications. Each perspective can reveal new layers of meaning and understanding.\n\nExamining related concepts and their connections can enhance our overall comprehension and provide a more complete picture of the subject matter.`;\n        }\n    } else {\n        // Analyze content for key themes\n        if (lowercaseText.includes(\"ai\") && lowercaseText.includes(\"business\")) {\n            return `${cleanText}\n\nArtificial Intelligence has become a cornerstone of modern business strategy. Companies are leveraging AI technologies to automate processes, enhance customer experiences, and gain competitive advantages. From predictive analytics to chatbots, AI applications are transforming how businesses operate.\n\nKey areas where AI impacts business include customer service automation, data analysis and insights, process optimization, predictive maintenance, and marketing personalization. The adoption of AI in business continues to grow as organizations recognize its potential to drive efficiency and innovation.\n\nHowever, implementing AI in business also presents challenges including data privacy concerns, the need for skilled talent, and ensuring ethical AI practices. Successful AI adoption requires careful planning, stakeholder buy-in, and ongoing evaluation of results.`;\n        } else {\n            return `${cleanText}\n\nThis topic presents multiple facets that merit deeper exploration. Understanding the underlying principles and broader implications can provide valuable insights for decision-making and future planning.\n\nConsider examining the historical context, current trends, and potential future developments related to this subject. Analyzing different perspectives and approaches can reveal new opportunities and considerations.\n\nAdditional research from expert sources, case studies, and real-world examples could further enhance understanding and provide practical applications of these concepts.`;\n        }\n    }\n}\nfunction createFallbackImprovement(text) {\n    if (!text) return text;\n    // Remove duplicated sentences/phrases\n    let improved = text;\n    // Split into sentences and remove duplicates\n    const sentences = improved.split(/[.!?]+/).filter((s)=>s.trim().length > 0);\n    const uniqueSentences = [];\n    const seen = new Set();\n    for (const sentence of sentences){\n        const normalized = sentence.trim().toLowerCase();\n        if (!seen.has(normalized) && normalized.length > 0) {\n            seen.add(normalized);\n            uniqueSentences.push(sentence.trim());\n        }\n    }\n    // Rejoin sentences\n    improved = uniqueSentences.join(\". \");\n    // Basic text improvements\n    improved = improved.replace(/\\s+/g, \" \") // normalize spaces\n    .replace(/([.!?])\\s*([a-z])/g, \"$1 $2\") // proper spacing after sentences\n    .replace(/\\bi\\b/g, \"I\") // capitalize 'i'\n    .replace(/([.!?])\\s*$/, \"$1\") // ensure proper ending\n    .trim();\n    // Ensure it starts with capital letter\n    if (improved.length > 0) {\n        improved = improved.charAt(0).toUpperCase() + improved.slice(1);\n    }\n    // Add period if missing\n    if (improved.length > 0 && !/[.!?]$/.test(improved)) {\n        improved += \".\";\n    }\n    // If the improvement didn't change much, provide a better version\n    if (improved === text || improved.length < text.length * 0.5) {\n        // Try to improve structure for AI/business content\n        if (text.toLowerCase().includes(\"ai\") && text.toLowerCase().includes(\"business\")) {\n            return \"Artificial Intelligence has become a cornerstone of modern business strategy, transforming how companies operate and compete in today's market.\";\n        }\n        // Generic improvement\n        return improved || text;\n    }\n    return improved;\n}\nfunction createFallbackTitle(text) {\n    if (!text || text.length < 10) {\n        return \"Quick Note\";\n    }\n    // Take the first meaningful sentence or phrase\n    const firstSentence = text.split(/[.!?]/)[0];\n    if (firstSentence.length > 50) {\n        return firstSentence.substring(0, 47) + \"...\";\n    }\n    return firstSentence || \"Note\";\n}\nfunction createFallbackTranslation(text, userMessage) {\n    // Extract target language from the user message\n    const languageMatch = userMessage.match(/translate.*?to\\s+(\\w+)/i);\n    const targetLanguage = languageMatch ? languageMatch[1] : \"Spanish\";\n    if (!text || text.trim().length === 0) {\n        return `Translation to ${targetLanguage} is not available at the moment.`;\n    }\n    // Basic fallback - just indicate translation would happen\n    return `[Translation to ${targetLanguage} would appear here. Original text: \"${text.substring(0, 100)}${text.length > 100 ? \"...\" : \"\"}\"]`;\n}\nfunction createFallbackChat(message) {\n    const responses = [\n        \"That's an interesting point! I'd be happy to help you explore this topic further.\",\n        \"I can see you're working on something important. Let me know how I can assist you better.\",\n        \"Great question! While I can't access my full capabilities right now, I'm here to help with your notes.\",\n        \"I appreciate you sharing this with me. Your ideas have potential for further development.\"\n    ];\n    return responses[Math.floor(Math.random() * responses.length)];\n}\nasync function summarizeText(text) {\n    if (!text || !text.trim()) {\n        throw new ManusAIError(\"Text is required for summarization.\");\n    }\n    const request = {\n        messages: [\n            {\n                role: \"system\",\n                content: \"You are a helpful assistant that creates concise, informative summaries. Focus on the key points and main ideas while maintaining clarity and coherence.\"\n            },\n            {\n                role: \"user\",\n                content: `Please summarize the following text, keeping the main points and key information:\\n\\n${text}`\n            }\n        ],\n        max_tokens: 500,\n        temperature: 0.3\n    };\n    const response = await callManusAI(request);\n    return response.choices[0]?.message?.content || \"No summary generated.\";\n}\nasync function expandText(text) {\n    if (!text || !text.trim()) {\n        throw new ManusAIError(\"Text is required for expansion.\");\n    }\n    const request = {\n        messages: [\n            {\n                role: \"system\",\n                content: \"You are a helpful assistant that expands and elaborates on text content. Add relevant details, examples, and explanations while maintaining the original meaning and context.\"\n            },\n            {\n                role: \"user\",\n                content: `Please expand and elaborate on the following text, adding relevant details and examples:\\n\\n${text}`\n            }\n        ],\n        max_tokens: 1000,\n        temperature: 0.5\n    };\n    const response = await callManusAI(request);\n    return response.choices[0]?.message?.content || \"No expansion generated.\";\n}\nasync function translateText(text, targetLanguage) {\n    if (!text || !text.trim()) {\n        throw new ManusAIError(\"Text is required for translation.\");\n    }\n    if (!targetLanguage || !targetLanguage.trim()) {\n        throw new ManusAIError(\"Target language is required for translation.\");\n    }\n    const request = {\n        messages: [\n            {\n                role: \"system\",\n                content: \"You are a helpful assistant that translates text accurately while preserving the original meaning and context. Provide only the translated text without additional commentary.\"\n            },\n            {\n                role: \"user\",\n                content: `Translate the following text to ${targetLanguage}:\\n\\n${text}`\n            }\n        ],\n        max_tokens: 1000,\n        temperature: 0.3\n    };\n    const response = await callManusAI(request);\n    return response.choices[0]?.message?.content || \"No translation generated.\";\n}\nasync function improveText(text, instructions) {\n    if (!text || !text.trim()) {\n        throw new ManusAIError(\"Text is required for improvement.\");\n    }\n    const request = {\n        messages: [\n            {\n                role: \"system\",\n                content: \"You are a helpful assistant that improves text quality. Focus on enhancing clarity, grammar, structure, and readability while preserving the original meaning and intent.\"\n            },\n            {\n                role: \"user\",\n                content: text // Just send the text directly, not with instructions\n            }\n        ],\n        max_tokens: 1000,\n        temperature: 0.4\n    };\n    const response = await callManusAI(request);\n    return response.choices[0]?.message?.content || \"No improvement generated.\";\n}\nasync function chatWithAI(messages) {\n    if (!messages || messages.length === 0) {\n        throw new ManusAIError(\"Messages are required for chat.\");\n    }\n    const request = {\n        messages: [\n            {\n                role: \"system\",\n                content: \"You are a helpful AI assistant integrated into a note-taking application. Help users with their notes by providing insights, suggestions, answering questions, and assisting with content creation and organization.\"\n            },\n            ...messages.map((msg)=>({\n                    role: msg.role,\n                    content: msg.content\n                }))\n        ],\n        max_tokens: 800,\n        temperature: 0.7\n    };\n    const response = await callManusAI(request);\n    return response.choices[0]?.message?.content || \"No response generated.\";\n}\nasync function generateTags(text) {\n    if (!text || !text.trim()) {\n        return [];\n    }\n    const request = {\n        messages: [\n            {\n                role: \"system\",\n                content: \"You are a helpful assistant that generates relevant tags for text content. Return only a comma-separated list of 3-7 relevant tags based on the content.\"\n            },\n            {\n                role: \"user\",\n                content: `Generate relevant tags for the following text:\\n\\n${text}`\n            }\n        ],\n        max_tokens: 100,\n        temperature: 0.3\n    };\n    try {\n        const response = await callManusAI(request);\n        const tagsText = response.choices[0]?.message?.content || \"\";\n        return tagsText.split(\",\").map((tag)=>tag.trim().replace(/^#/, \"\")).filter((tag)=>tag.length > 0).slice(0, 7);\n    } catch (error) {\n        console.warn(\"Failed to generate AI tags, using fallback:\", error);\n        // Fallback tag generation\n        return generateFallbackTags(text);\n    }\n}\nfunction generateFallbackTags(text) {\n    const lowercaseText = text.toLowerCase();\n    const tags = [];\n    // Common topic keywords\n    const topicKeywords = {\n        \"meeting\": [\n            \"meeting\",\n            \"discussion\"\n        ],\n        \"project\": [\n            \"project\",\n            \"task\",\n            \"work\"\n        ],\n        \"idea\": [\n            \"idea\",\n            \"concept\",\n            \"brainstorm\"\n        ],\n        \"note\": [\n            \"note\",\n            \"remember\"\n        ],\n        \"todo\": [\n            \"todo\",\n            \"task\",\n            \"action\"\n        ],\n        \"research\": [\n            \"research\",\n            \"study\",\n            \"analysis\"\n        ],\n        \"personal\": [\n            \"personal\",\n            \"diary\",\n            \"journal\"\n        ],\n        \"business\": [\n            \"business\",\n            \"company\",\n            \"corporate\"\n        ],\n        \"finance\": [\n            \"money\",\n            \"finance\",\n            \"budget\",\n            \"cost\"\n        ],\n        \"tech\": [\n            \"technology\",\n            \"software\",\n            \"code\",\n            \"programming\"\n        ],\n        \"health\": [\n            \"health\",\n            \"medical\",\n            \"wellness\"\n        ],\n        \"travel\": [\n            \"travel\",\n            \"trip\",\n            \"vacation\"\n        ],\n        \"food\": [\n            \"food\",\n            \"recipe\",\n            \"cooking\"\n        ],\n        \"learning\": [\n            \"learn\",\n            \"education\",\n            \"course\"\n        ]\n    };\n    // Check for topic matches\n    for (const [tag, keywords] of Object.entries(topicKeywords)){\n        if (keywords.some((keyword)=>lowercaseText.includes(keyword))) {\n            tags.push(tag);\n        }\n    }\n    // Extract potential tags from capital words\n    const capitalWords = text.match(/\\b[A-Z][a-z]+\\b/g) || [];\n    capitalWords.forEach((word)=>{\n        if (word.length > 3 && !tags.includes(word.toLowerCase())) {\n            tags.push(word.toLowerCase());\n        }\n    });\n    // Add urgency tags\n    if (/urgent|important|asap|deadline/i.test(text)) {\n        tags.push(\"urgent\");\n    }\n    if (/question|help|ask/i.test(text)) {\n        tags.push(\"question\");\n    }\n    // Return up to 5 tags\n    return tags.slice(0, 5);\n}\nasync function suggestTitle(text) {\n    if (!text || !text.trim()) {\n        throw new ManusAIError(\"Text is required for title suggestion.\");\n    }\n    const request = {\n        messages: [\n            {\n                role: \"system\",\n                content: \"You are a helpful assistant that suggests concise, descriptive titles for text content. Return only the title, no additional text or formatting.\"\n            },\n            {\n                role: \"user\",\n                content: `Suggest a concise title for the following text:\\n\\n${text.substring(0, 500)}`\n            }\n        ],\n        max_tokens: 50,\n        temperature: 0.4\n    };\n    const response = await callManusAI(request);\n    return response.choices[0]?.message?.content?.trim() || \"Untitled Note\";\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/lib/manus.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/node-fetch","vendor-chunks/web-streams-polyfill","vendor-chunks/fetch-blob","vendor-chunks/formdata-polyfill","vendor-chunks/data-uri-to-buffer","vendor-chunks/node-domexception"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fgenai%2Fchat%2Froute&page=%2Fapi%2Fgenai%2Fchat%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fgenai%2Fchat%2Froute.ts&appDir=%2Fworkspaces%2F24005826G_lab2_V2%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2Fworkspaces%2F24005826G_lab2_V2&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();